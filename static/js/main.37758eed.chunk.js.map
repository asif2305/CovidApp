{"version":3,"sources":["logo.svg","covidComponent/covidHome.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","covidHome","props","state","confirmed","recovered","deaths","countries","region","getCountryData","bind","this","getData","Axios","get","resApi","resCountries","setState","data","value","e","target","forRegion","resRegionApi","console","log","response","status","map","country","i","key","name","countryRegion","provinceState","active","uid","Math","round","incidentRate","className","onChange","renderCountryOption","renderTableRegionData","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,mMCqI5BC,G,wDAhIX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAKVC,MAAQ,CACJC,UAAW,EACXC,UAAW,EACXC,OAAQ,EACRC,UAAW,GACXC,OAAO,IATP,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBAFP,E,gEAefC,KAAKC,Y,kKAIgBC,IAAMC,IAAI,kC,cAAzBC,E,gBACqBF,IAAMC,IAAI,4C,OAA/BE,E,OACNL,KAAKM,SAAS,CACVb,UAAWW,EAAOG,KAAKd,UAAUe,MACjCd,UAAWU,EAAOG,KAAKb,UAAUc,MACjCb,OAAQS,EAAOG,KAAKZ,OAAOa,MAC3BZ,UAAWS,EAAaE,KAAKX,Y,oLAKhBa,G,8EACK,aAAlBA,EAAEC,OAAOF,M,yCACFR,KAAKC,W,uBAINU,EAAUF,EAAEC,OAAOF,M,SACJN,IAAMC,IAAN,mDAAsDM,EAAEC,OAAOF,Q,cAA9EJ,E,gBACoBF,IAAMC,IAAI,4CAA6CQ,EAAW,c,OAAtFC,E,OAENZ,KAAKM,SAAS,CACVb,UAAWW,EAAOG,KAAKd,UAAUe,MACjCd,UAAWU,EAAOG,KAAKb,UAAUc,MACjCb,OAAQS,EAAOG,KAAKZ,OAAOa,MAC3BX,OAAOe,EAAaL,OAE1BM,QAAQC,IAAI,4CAA8CH,EAAW,mB,kDAGvC,MAAxB,KAAII,SAASC,QACbhB,KAAKM,SAAS,CACVb,UAAW,oBACXC,UAAW,oBACXC,OAAQ,sB,6JAQpB,OAAOK,KAAKR,MAAMI,UAAUqB,KAAI,SAACC,EAASC,GACtC,OAAO,4BAAQC,IAAKD,GAAID,EAAQG,W,8CAKpC,OAAOrB,KAAKR,MAAMK,OAAOoB,KAAI,SAACpB,EAAOsB,GACjC,OAAO,4BACH,4BAAKtB,EAAOyB,eACZ,4BAAKzB,EAAO0B,eACZ,4BAAK1B,EAAOH,WACZ,4BAAKG,EAAOJ,WACZ,4BAAKI,EAAOF,QACZ,4BAAKE,EAAO2B,QACZ,4BAAK3B,EAAO4B,KACZ,4BAAKC,KAAKC,MAAM9B,EAAO+B,qB,+BAK/B,OACI,yBAAKC,UAAU,aACX,6CACA,4BAAQC,SAAU9B,KAAKF,eAAgB+B,UAAU,YAC7C,6CACC7B,KAAK+B,uBAEV,yBAAKF,UAAU,QACX,yBAAKA,UAAU,iBACX,+CACC7B,KAAKR,MAAMC,WAEhB,yBAAKoC,UAAU,iBACX,+CACC7B,KAAKR,MAAME,WAEhB,yBAAKmC,UAAU,cAEX,sCACC7B,KAAKR,MAAMG,SAGpB,yBAAKkC,UAAU,cACX,2BAAOA,UAAU,aACb,+BACG,4BACA,sCACC,qCACA,yCACA,yCACA,sCACA,sCACA,iDACA,+CAGJ,+BACI7B,KAAKgC,gC,GAxHTC,cCWTC,MARf,WACE,OACE,yBAAKL,UAAU,OACd,kBAAC,EAAD,QCGeM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.37758eed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport Axios from 'axios';\r\nimport Moment from 'react-moment'\r\nclass covidHome extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.getCountryData = this.getCountryData.bind(this);\r\n\r\n    }\r\n\r\n    state = {\r\n        confirmed: 0,\r\n        recovered: 0,\r\n        deaths: 0,\r\n        countries: [],\r\n        region:[]\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getData();\r\n    }\r\n\r\n    async getData() {\r\n        const resApi = await Axios.get('https://covid19.mathdro.id/api');\r\n        const resCountries = await Axios.get('https://covid19.mathdro.id/api/countries');\r\n        this.setState({\r\n            confirmed: resApi.data.confirmed.value,\r\n            recovered: resApi.data.recovered.value,\r\n            deaths: resApi.data.deaths.value,\r\n            countries: resCountries.data.countries\r\n\r\n        })\r\n\r\n    }\r\n    async getCountryData(e) {\r\n        if (e.target.value == 'Worldwide') {\r\n            return this.getData();\r\n\r\n        }\r\n        try {\r\n            const forRegion=e.target.value;\r\n            const resApi = await Axios.get(`https://covid19.mathdro.id/api/countries/${e.target.value}`);\r\n            const resRegionApi= await Axios.get(`https://covid19.mathdro.id/api/countries/`+ forRegion+ '/confirmed');\r\n        \r\n            this.setState({\r\n                confirmed: resApi.data.confirmed.value,\r\n                recovered: resApi.data.recovered.value,\r\n                deaths: resApi.data.deaths.value,\r\n                region:resRegionApi.data\r\n            })\r\n          console.log(`https://covid19.mathdro.id/api/countries/` + forRegion +'/confirsekrfkwe');\r\n        }\r\n        catch (err) {\r\n            if (err.response.status === 404) {\r\n                this.setState({\r\n                    confirmed: 'No data available',\r\n                    recovered: 'No data available',\r\n                    deaths: 'No data available',\r\n                })\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    renderCountryOption() {\r\n        return this.state.countries.map((country, i) => {\r\n            return <option key={i}>{country.name}</option>\r\n        });\r\n    }\r\n    renderTableRegionData()\r\n    {\r\n        return this.state.region.map((region,i)=>{\r\n            return <tr>\r\n                <td>{region.countryRegion}</td>\r\n                <td>{region.provinceState}</td>\r\n                <td>{region.recovered}</td>\r\n                <td>{region.confirmed}</td>\r\n                <td>{region.deaths}</td>\r\n                <td>{region.active}</td>\r\n                <td>{region.uid}</td>\r\n                <td>{Math.round(region.incidentRate)}</td>\r\n            </tr>\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>Corona Update</h1>\r\n                <select onChange={this.getCountryData} className='dropdown'>\r\n                    <option>Worldwide</option>\r\n                    {this.renderCountryOption()}\r\n                </select>\r\n                <div className=\"flex\">\r\n                    <div className=\"box confirmed\">\r\n                        <h3>Confirmed Cases</h3>\r\n                        {this.state.confirmed}\r\n                    </div>\r\n                    <div className=\"box recovered\">\r\n                        <h3>Recovered Cases</h3>\r\n                        {this.state.recovered}\r\n                    </div>\r\n                    <div className=\"box deaths\">\r\n\r\n                        <h3>Deaths</h3>\r\n                        {this.state.deaths}\r\n                    </div>\r\n                </div>\r\n                <div className=\"covidTable\">\r\n                    <table className='covidData'>\r\n                        <thead>\r\n                           <tr>\r\n                           <th>Region</th>\r\n                            <th>State</th>\r\n                            <th>Recovered</th>\r\n                            <th>Confirmed</th>\r\n                            <th>deaths</th>\r\n                            <th>Active</th>\r\n                            <th>Unique Identifier</th>\r\n                            <th>Incident Rate</th>\r\n                           </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                           {this.renderTableRegionData()}\r\n                        </tbody>\r\n\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default covidHome;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CovidHome from './covidComponent/covidHome'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <CovidHome/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}